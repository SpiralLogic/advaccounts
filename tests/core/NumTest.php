<?php
  namespace ADV\Core;

  /**
   * Generated by PHPUnit_SkeletonGenerator on 2012-06-12 at 21:03:00.
   */
  class NumTest extends \PHPUnit_Framework_TestCase
  {
    /**
     * @var Num
     */
    protected $object;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
      $this->object = new Num;
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    /**
     * @covers ADV\Core\Num::price_format
     * @todo   Implement testPrice_format().
     */
    public function testPrice_format()
    {
      $actual   = Num::price_format('25.563434');
      $expected = ('25.56');
      $this->assertEquals($expected, $actual);
    }
    /**
     * @covers ADV\Core\Num::price_decimal
     * @todo   Implement testPrice_decimal().
     */
    public function testPrice_decimal()
    {
      /*$actual = Num::price_decimal('25.563434');
    $expected = '25.56';
    $this->assertEquals($expected,$actual);
    */
    }
    /**
     * @covers ADV\Core\Num::round
     * @todo   Implement testRound().
     */
    public function testRound()
    {

      $actual   = Num::round('25.563434', 2);
      $expected = '25.56';
      $this->assertEquals($expected, $actual);
      $actual   = Num::round('25.56345', 4);
      $expected = '25.5634';
      $this->assertEquals($expected, $actual);
      $actual   = Num::round('25.565', 2);
      $expected = '25.56';
      $this->assertEquals($expected, $actual);
      $actual   = Num::round('25.575', 2);
      $expected = '25.58';
      $this->assertEquals($expected, $actual);
    }
    /**
     * @covers ADV\Core\Num::format
     * @todo   Implement testFormat().
     */
    public function testFormat()
    {
      // Remove the following lines when you implement this test.
      $this->markTestIncomplete('This test has not been implemented yet.');
    }
    /**
     * @covers ADV\Core\Num::exrate_format
     * @todo   Implement testExrate_format().
     */
    public function testExrate_format()
    {
      // Remove the following lines when you implement this test.
      $this->markTestIncomplete('This test has not been implemented yet.');
    }
    /**
     * @covers ADV\Core\Num::percent_format
     * @todo   Implement testPercent_format().
     */
    public function testPercent_format()
    {
      // Remove the following lines when you implement this test.
      $this->markTestIncomplete('This test has not been implemented yet.');
    }
    /**
     * @covers ADV\Core\Num::round_to_nearest
     * @todo   Implement testRound_to_nearest().
     */
    public function testRound_to_nearest()
    {
      $actual   = Num::Round_to_nearest(231.00, 200);
      $expected = 'Two Hundred and Thirty-One';
      $this->assertEquals($expected, $actual);
    }
    /**
     * @covers ADV\Core\Num::to_words
     * @todo   Implement testTo_words().
     */
    public function testTo_words()
    {
      // Remove the following lines when you implement this test.
      $actual   = Num::to_words(231);
      $expected = 'Two Hundred and Thirty-One';
      $this->assertEquals($expected, $actual);
      $actual   = Num::to_words(4249);
      $expected = 'Four Thousand Two Hundred and Fourty-Nine';
      $this->assertEquals($expected, $actual);
      $actual   = Num::to_words(4249.22);
      $expected = 'Four Thousand Two Hundred and Fourty-Nine';
      $this->assertEquals($expected, $actual);
    }
  }
